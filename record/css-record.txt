1.<link>:       外联css样式表
    href:       指向链接地址 
    rel:        规定当前文档与被链接文档之间的关系         eg:rel="stylesheet"
    type:       文档类型                                 eg:type="text/css"
2.<style>:      内联样式
    背景：
        background-color: 背景色
        background-image: 背景图
            线性渐变：
                线性渐变，默认从顶倒下                   eg:  background-image: linear-gradient(red,green);
                由下往上的线性渐变                       eg:  background-image: linear-gradient(to top,red,green);
                到右上角的线性渐变                       eg:  background-image: linear-gradient(to top right,red,green); 
                多颜色的线性渐变                         eg:  background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);
                角度向135度的线性渐变                    eg:  background-image: linear-gradient(135deg red,blue,green);
                透明度的渐变                             eg:  background-image: linear-gradient(to right,rgba(255,0,0,0),rgba(255,0,0,1));
                重复的线性渐变                           eg:  background-image: repeating-linear-gradient(to right,red,yellow 10%,green 20%);
            径向渐变：
                径向渐变 - 颜色节点均匀分布（默认情况下）   eg:  background-image: radial-gradient(red,green,yellow);
                径向渐变 - 颜色节点不均匀分布              eg:  background-image: radial-gradient(red 5%,green 25%,yellow 60%);
                设置为圆型的径向渐变（默认椭圆）           eg:  background-image: radial-gradient(circle, red,green,yellow);
                带有不同尺寸大小关键字的径向渐变           eg:  background-image: radial-gradient(farthest-corner at 60% 55% red,green,yellow);
                重复的径向渐变                            eg:  background-image: repeating-radial-gradient(red,yellow 10%,green 20%);
        background-repeat:背景图是否循环                  eg:background-repeat:no-repeat; background-repeat:repeat-x;
        background-attachment: 背景图是否随之滚动
            scroll： 随之滚动       fixed:  静止
        background-position:   背景图位置
            right：  靠右           top:    置顶       center：  居中      eg:  background-position: top 20px right 10px;
        background-size:  背景图大小
            contain:        自适应宽高放缩小的的一个属性
            cover:          自适应宽高放缩大的的一个属性
            100% 100%:      通过拉伸铺满
        background-origin:规定背景图定位区域              eg：background-origin: padding-box;
        background-clip:  限定背景图覆盖范围              eg:background-clip: padding-box;
        background:       可简写背景属性                  eg：background:#9c7979 url("1.jpeg") no-repeat scroll left top;
            可简写多个背景图： background-image:url()，url(); 前一张图层级更高，其他属性也可加逗号简写多个值。只有一个值通用
            background ： [background-color] | [background-image] | [background-position][/background-size] |
                                            [background-repeat] | [background-attachment] | [background-clip] | [background-origin],...
    边框&轮廓：  outline与border用法相同
        outline-offset:   轮廓到边距的距离
        border-image:     图像边框 ,可按下列顺序简写      eg:border-image: url(../images/9.png) 30 30 round;
            border-image-surce:    图像链接地址url()
            border-image-slice:    图像边界向内偏移
            border-image-width:    图像边界的宽度	
            border-image-outset:   用于指定在边框外部绘制 border-image-area 的量
            border-image-repeat:   是否重复
        border-style：    边框样式，也可写四个值对应四边   eg:border-style:dotted solid double ridge;
            none	定义无边框。
            hidden	与 "none" 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。
            dotted	定义点状边框。在大多数浏览器中呈现为实线。
            dashed	定义虚线。在大多数浏览器中呈现为实线。
            solid	定义实线。
            double	定义双线。双线的宽度等于 border-width 的值。
            groove	定义 3D 凹槽边框。其效果取决于 border-color 的值。
            ridge	定义 3D 垄状边框。其效果取决于 border-color 的值。
            inset	定义 3D inset 边框。其效果取决于 border-color 的值。
            outset	定义 3D outset 边框。其效果取决于 border-color 的值。
        border-width：    简写属性，边宽                  eg:border-width:medium; 标准宽
        border-color：    简写属性，边框颜色
        border-left-width:左边框宽度
        border-radius：   设置椭圆边框                   eg:border-radius:25px; 
            100px/25px:   设置边框椭圆,最高值为高宽的一半，这里两个值为圆角的宽和高
            50px 25px:    简写，可写成50px/50px 25px/25px 50px/50px 25px/25px 
            25px:         只有一个值则表示圆角宽高一样，为圆形
            20%:          20%表示取框的宽高的百分比作为数值,可写成width*20%/height*20%
            2em 1em 4em / 0.5em 3em：    简写，可写成2em/0.5em 1em/3em/ 4em/0.5em 1em/3em
        border:           简写边是声明                   eg:border: 5px solid black;
            5px:边宽   solid:  实线     black:  黑色
            border:       字写两种属性不写颜色时，表示颜色随元素内容变化，有时用来表示下划线
        border-top：      简写一边边框声明                eg:border-top:7px double rgb(35, 161, 67);
            border-bottom：仅声明样式                     eg: border-bottom:hidden;
        background-color：背景色
        width：           框宽   
        height：          框高
        padding:          内边距(上，右，下，左四个数据)   eg:padding:20px 50% 20px 32px
        margin-left:      外边距（左）                    eg:margin:100px 60px 40px 20px;
        margin-right：    外边距（右）
        margin: 0 auto:   0: 上下外边距为零   auto：特殊值水平左右对称   有使用于居中
    字体：
        color:            颜色
        font-size:        字体大小，可以px和em转换        eg:font-size:2.5em; /* 1em=16px  40px=2.5em */
        font-family:      字体
        font-style:       字体样式
            italic：  斜体         normal:  标准        obligation:  文字倾斜
        font-weight：     字体粗细
            normal：  标准         lighter：更细        bold: 更粗的        数字：数值
        font-varitant：   normal：标准      small-caps；小型大写英文字体
        font：            字体简写                       eg:font:italic normal 800 20px/30px Georgia,serif;
        letter-spacing:   字体间距
    文本：
        text-style:       是否斜体
            normal:         将文本设置为普通字体 (将存在的斜体关闭)
            italic:         如果当前字体的斜体版本可用，那么文本设置为斜体版本；如果不可用，那么会利用 oblique 状态来模拟 italics。
            oblique:        将文本设置为斜体字体的模拟版本，也就是将普通文本倾斜的样式应用到文本中。
        text-align:       文字位置
            center:居中        left:居左         right:居右          justify:左右对齐
        vertical-align:   垂直对齐
        text-shadow:      设置文本阴影                      eg:text-shadow: 3px 3px 1px black;
            3px:水平偏移值（右，左负值）     3px:垂直偏移值（下，上负值）    1px:模糊半径     black:基色
        text-decoration： 设置下划线(可定义多个划线)          eg: text-decoration: text-decoration-line text-decoration-style text-decoration-color;
            none:无下划线      overline:上划线   line-through:删除线  underline:下划线 
        text-widght:      设置文字的粗体大小
            normal, bold: 普通或者加粗的字体粗细
        text-transform：
            none:  不允许转变     uppercase：全部大写     lowercase：全部小写     capitalize：首字母大写
        text-indent;      首行缩进                          eg:text-indent:50px;
        text-overflow:    溢出裁切                          eg:text-overflow: ellipsis;
            ellipsis:  默认使用。。。来表示文本被裁切      clip:  直接被切 
        word-wrap:        允许对长的不可分割的单词进行分割并换行到下一行。
        word-break:       规定非中日韩文本的换行规则。
            keep-all:   保留完整单词      break-all:   打破一个单词 
        direction:        内容排列方向 
            rtl:          right to left
    段落：
        white：           设置元素中空白的处理方式           eg:white-space:pre;   
            pre:定义预设格式
        width:            可用来设置元素宽度
        line-height:      行高                             eg:line-height:70%;
        letter-spacing:   字符间距                         eg:word-spacing:30px;
        word-spacing:     单词间距                         eg:word-spacing:30px;
        vertical-align:   垂直对齐
            text-top：对其顶端                text-bottom：对其下面
        direction：       文本方向   常与unicode-bidi一起使用
            rtl:从右到左         ltr:从左到右
        unicode-bidi：    设置或返回文本是否被重写          eg:direction:rtl;  unicode-bidi:bidi-override;
    链接:   按顺序排
        a.link:       未访问
        a.visited:    已访问后
        a.hover:      悬停
        a.active:     点击
            display:  定义生成行内框类型       padding： 一个属性表示上下左右
                block: 块,前后有换行符                   两个属性表示上下，左右  
                inline:默认，无换行符                    三个属性表示上，左右，下
                table：块级表，有换行符                  四个属性表示上，左，右，下 
                inline-block：行内块      
    列表：
        list-style-type:    列表序号样式
            无序：square:实正方形  circle:空心圆  disc:实心圆
            有序：decimal:自然数  decimal-leading-zero:十位自然数  lower-latin:小写字母  
                 lower-roman:小写罗马数  upper-latin:大写字母  upper-roman:大写罗马数  none:没有
        list-style-image:   图像序号                       eg:background-image:url("./6.png");
        list-style-position:设置列表标识位置
            outside：默认    inside：文本内，环绕    inherit：从父元素继承
        list-style：  简写按顺序                            eg:list-style: inside square url("./6.png")
        margin：      设置边距
        padding;      设置填充
        建立新的图像标记：
            background-image：   图像                       eg:background-image:url("./6.png");
            background-repeat：  是否循环                   eg:background-repeat:no-repeat;
            background-position：图下位置                   eg:background-position:26px 7px;
            padding-left：       元素左边距                 eg:padding-left:40px;
    表格：
        table:       定义表格样式
            border-collapse:collapse：定义边框合并单一边框
            margin:    外边距     margin:0 auto：表示居中 
            width:     定义表格宽度，可用50%等                        
            caption: 表格名字  
                caption-side：标题位置                      eg:caption-side:bottom;
            <th>:<td>:
                border:边框样式                             eg:border: 0.5px solid black;
                height:行高，不能用50%
    盒子：
        div宽度=margin*2+border*2+padding*2+width
        p{margin:0px;}能去除浏览器自带的段落间margin 的设置
    宽高：
        width：
            max-width：min-width：                         eg:    min-width:500px; max-width:600px;
                在限定的最大宽度中，页面会自动换行（高度无限（未限定下）），而高度不存在换宽，文本过多会超过本元素盒子。
                max-width：100%   相对于自身扩大到原图100%后，不会继续扩展
        height：
            max-height：min-height：                       eg：   min-height:60px;  max-height:50px; 
            	在限定的最小宽度中，会判定自身宽度是否符合大于最小宽度，符合则按本身的宽度，反之则按最小的。高度亦如此。
        line-height： 行高                                 eg:p.small {line-height:90%}
    显示：
        display:     规定显示元素的类型
            none:    不显示，不占用空间
            inline:  内联元素，显示在同一行
            block：  快联元素，同一行会换行
                span:用于对文档中的行内元素进行组合         eg:<p>我的母亲有 <span style="color:blue">蓝色</span> 的眼睛。</p>
        visibility:  指定一个元素是否可见
            hidden： 隐藏元素，占用空间
            collapse:用于表格时指删除一行，用于其元素表示hidden
    定位：
        position:        定位                             eg:position:static;
            static：     默认值，没有定位遵循文档流
            fixed：      元素相对浏览器窗口固定，脱离文档流 
            relative:    相对自身原来位置变化并固定，原位置遵循文档流
            absolute:    相对最近的以固定位置的父级元素进行定位，脱离文档流 没有父级定位则相对<html>
            sticky:      基于用户的滚动位置来定位,
        z-index:         堆叠顺序，正负值为向上向下移动层级数
        clip:            裁剪元素外形                      eg:rect(10px 140px 100px 10px);
            案例中四个值分别对应为：左边裁去多少，元素原宽-右边裁去宽，元素原高-下边裁去高，右边裁去多少
        overflow:        元素内容溢出时，设置滚动条
            visible：    默认值。内容不会被修剪，会呈现在元素框之外。
            hidden：     内容会被修剪，并且其余内容是不可见的
            auto：       如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。
            scroll：     内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。
    浮动:
        float: left,right,none
        clear: both:两侧不浮动，用来终止浮动   
               left:左侧不浮动
               none:浮动
    导航栏：
        list-style-type:none   消除列表标记
        margin:0  padding:0    消除列表自带浏览器外框填充
        position:              定位
        overflow:auto          
        text-decoration:none   消除链接下划线
        float:left             设置浮动成一行
        display:block          设置链接为块元素
    下拉菜单：
        overflow:hidden        高度溢出隐藏
        .dropdown{display:inline-block;}       容器div 定位下拉内容
        display:none           不显示，不占空间
        display:block          隐藏浮现                     eg:.dropdown:hover .button-form {display:block;}
    提示工具：
        visibility：hidden     占空间隐藏
        visibility: visible    显现
        border-radius:         设置圆角
        z-indent:              堆叠层数
        opacity:               透明度0-1                    eg: opacity: 1;
        transition:            元素过度属性                  eg: transition: opacity 1s;
        ::after                伪类元素
            content:           配合使用，插入内容             eg: content: "";
            position:          定位
            border-color:      查入内容颜色，有透明           eg: border-color: transparent transparent black transparent;
    图片廊：
        max-width:100%；height:auto; ： 最大宽度不超过自身，高度自适应
        width:100%；height:auto; ：     宽高度自适应
        filter:        图像滤镜                                   eg:filter: invert(150%);
        border-radius: 图像圆角
        box-shadow:    卡片式图像
        消除链接中图片下面的空间：                             eg:a {display: block;font-size:0;}
        浮动后宽度来自原父级；
        @media only screen and (max-width:800px) {} ,响应式元素。表示800px以下用{}的.
        background:url("../image/8.gif") no-repeat -47px 0;
            这是一个背景图简写，url("")用来容纳图像链接，repeat表示是否循环，-47px 0 用来确定所需图像在图像集的位置，left:47px,表示元素li向右移47px.       
    媒体类型：
        @media
            screen:   用于电脑显示屏
            prit:     用于打印机
            all:      用于所有的媒体设备
            aural：   用于语音和音频合成器
            projection： 用于方案展示，如幻灯片
            tty:      用于使用固定密度字母栅格媒体，如电传打印机和终端
            tv：      用于电视类型设备
            braille： 用于盲人用点字法触觉回馈设备。
            embossed：用于分页的盲人用点字法打印机。
            handheld：用于小的手持的设备。
        not:       not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。
        only:      用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。
                    对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。              
    表单：
        <form>:       表示表单，可定义表单的发送属性         eg:<form action="MAILTO:824618906@qq.com" method="post" enctype="text/plain">   
        <fieldset>:   定义表单框
            <legend>：定义表单框上标题
            <lable>:  用for="'来关联下面带id元素            eg:label for="name">姓名：</label>
                placeholder: 替代value,输入时不显现
        box-sizing：  用来确保浏览器呈现出带有指定宽度和高度的输入框是把边框和内边距一起计算进去
        display：     这用来换行                            eg:display:block;
        border-radius:设置圆角
        transition:   设置动画显现时间                      eg:transition: width 1s ease-in-out 2s;
            width:        表示要变化的属性，属性为transsition-property
            1s:           表示过渡时间，属性为transition-duration
            ease-in-out： 表示慢速开始和结束，属性为transition-timing-function
            2s:           表示悬浮两秒后过度，属性为transition-delay
        box-shadow：  盒子阴影
        text-indent:  首行缩进
        cursor:pointer鼠标手样式
        resize:       用于设置文本域是否可以重置大小的功能
        input[type="text"]:  属性选择器
        :focus        用于选择具有焦点的元素,可理解为选中    eg: resize: none;
        :after        用于在元素后插入内容
        @meida screen and () : 
    2D,3D转换：
        transform-origin:  	用于更改转化元素位置
        transform：   2D和3D转换属性
            matrix(n,n,n,n,n,n）：	 2D 转换，使用六个值的矩阵。
            translate(x,y）：	     2D 转换，沿着 X 和 Y 轴移动元素。
            translateX(n）：	     2D 转换，沿着 X 轴移动元素。
            translateY(n）：	     2D 转换，沿着 Y 轴移动元素。
            scale(x,y）：	         2D 缩放转换，改变元素的宽度和高度。
            scaleX(n）：	         2D 缩放转换，改变元素的宽度。
            scaleY(n）：	         2D 缩放转换，改变元素的高度。
            rotate(angle）：	     2D 旋转，在参数中规定角度。
            skew(x-angle,y-angle）： 2D 倾斜转换，沿着 X 和 Y 轴。
            skewX(angle）：	         2D 倾斜转换，沿着 X 轴。
            skewY(angle）：	         2D 倾斜转换，沿着 Y 轴。
    动画和过度动画：
        transition:   设置过度动画显现时间                   eg:transition: width 1s ease-in-out 2s;
            width:        表示要变化的属性，属性为transsition-property
            1s:           表示过渡时间，属性为transition-duration
            ease-in-out： 表示慢速开始和结束，属性为transition-timing-function
            2s:           表示悬浮两秒后过度，属性为transition-delay
        @keyframes:   用来规定动画过程                      eg:@keyframes my {0% {background-color: blue;left: 0px;top: 0px;} 25% {background-color: rgb(0, 255, 13);left: 200px;top: 0px;}....}
            form=0%   to=100%   百分比表示动画过了多久
        animation：   动画属性简写                          eg:animation: my 5s ease-in-out 2s infinite alternate none running;
            animation-name: my;                      动画名字--my
            animation-duration: 5s;                  动画时长--5s
            animation-timing-function: ease-in-out;  动画快慢--开始结束慢速
            animation-delay: 2s;                     动画开始时间--2s
            animation-iteration-count: infinite;     动画播放次数--永久
            animation-direction: alternate;          动画可否逆向播放--1，3，5正，2，4，6逆
            animation-fill-mode: none;               动画无法播放时--当动画完成时，或当动画有一个延迟未开始播放时，要应用到元素的样式。
            animation-play-state: running;           动画是否运行--运行
    分列：
        columns:       column-width和column-count的简写，以column-count为主。
        column-count:  分列数
        column-gap:    列之间的距离
        column-rule:   分隔线的简写                       eg:column-rule: 2px solid rgba(231, 194, 145, 0.356);
        column-width:  列宽
        column-fill:   列的填充效果
            balance:  默认，以短对齐      auto： 列顺序填充
        column-span:   横跨一行还是全部
            1： 一行          all:   全部行
    用户界面：
        box-sizing:
            content-box: 默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。
            border-box: 设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，
                        内容区的实际宽度是 width 减 去(border + padding) 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。
        resize:         定义用户是否可以调整元素大小
            none	    用户无法调整元素的尺寸
            both	    用户可调整元素的高度和宽度
                overflow：hidden   用户无论怎么调整时隐藏的内容还是会裁切
                overflow：auto     用户调整尺寸小于内容显示时，才会出现滚动条，可以说，这是最美观的设置（<textarea> 也是自带此属性）
                overflow：scroll   用户调整时不管是否拉伸尺寸，元素始终显示滚动条
                    overflow-x：   进定义一侧的滚动条
                    overflow-y：
            horizontal	用户可调整元素的宽度
         vertical	用户可调整元素的高度          
    弹性盒子：
        display：flex    定义盒子为弹性盒子，默认值只有一行或者一列
        flex-direction:  定义弹性元素在弹性盒子的排列方向
            row:    默认值，从左往右排列      row-reverse:     从右往左排列
            column：垂直排列，起点在上方      column-reverse:  垂直排列，起点在下方
        justify-content: 定义弹性子元素在弹性盒子内横轴的分布情况
            flex-start：   弹性子元素从主轴开始的地方堆叠分布（像float）
            flex-end：     弹性子元素从主轴结束的地方堆叠分布（像float）
            center：       弹性子元素在主轴居中分布
            space-between: 两端对齐，子元素间间隔相同，如均匀分布在轴上，两边间隔为零
            space-around:  子元素平均分布在该行上，两边留有一半的间隔空间           
        align-items:     定义子元素在盒子内纵轴(单行)的对齐方式
            flex-start：   弹性子元素从侧轴开始的地方堆叠分布（像float）
            flex-end：     弹性子元素从侧轴结束的地方堆叠分布（像float）
            center：       弹性子元素在主轴居中分布
            baseline:      弹性子元素在主轴以第一子元素文本下划线位置对齐
            stretch:       默认，如果项目未设置高度或设为auto，将占满整个容器的高度
        flex-wrap:      定义弹性盒子是否可以换行
            wrap:          可以换行
            nowrap:        默认，不可以换行
            wrap-reverse:  可以换行，往反方向换行（上）
        align-content:  在flex-wrap的前提下，定义多行在侧轴的分布，效果如（justufy)
            flex-start：   行从侧轴开始的地方堆叠分布（像float）
            flex-end：     行从侧轴结束的地方堆叠分布（像float）
            center：       行在侧轴居中分布
            space-between: 两端对齐，行间间隔相同，如均匀分布在轴上，两边间隔为
            space-around:  行平均分布在该轴上，两边留有一半的间隔空间 
            stretch：      默认，如果项目未设置高度或设为auto，各行将调整高度占满整个容器的高度
        flex-flow:         flex-direction 和 flex-wrap 属性的简写
        子元素：
            order:         默认为零，数字大小表示项目的顺序，越大越排后
            align-self:    用于自身的align-items，将覆盖align-items属性值
            fiex:          简写以下三个属性
                flex-grow:   属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大
                flex-shrink: 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
                flex-basis:  属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。然后按比例分配。
                             即该元素地最小宽度，它的默认值为auto，即项目的本来大小。
    网格布局：
        display:      
            grid:        定义为网格元素,子元素未定义宽度自动铺满
            inline-grid: 定义为网格元素，子元素未定义宽度自动按子元素内容宽度
        grid-template-columns： 定义列数
            eg: grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));    自动填充，列宽最小200px,最大一个fr
                grid-auto-rows: minmax(100px, auto);                             行高最小100px,最大随内容
        grid-template-rows：    定义行数
            auto：默认值     px: 宽高数值    fr:表示网格容器中可用空间的一等份
        grid-gap：       简写grid-row-gap 和  grid-column-gap ，可写一个数值
            grid-column-gap:   定义列间距
            grid-row-gap:      定义行间距
        grid-area:       简写 grid-column-start ，grid-row-start和 grid-column-end ，grid-row-end属性
            grid-column:   简写 grid-column-start 和 grid-column-end 属性
            grid-row:      简写 grid-row-start 和 grid-row-end 属性
                grid-column-start: 	指定网格元素列的开始位置
                grid-row-start:    	指定网格元素行的开始位置
                grid-column-end:   	指定网格元素列的结束位置
                grid-row-end:      	指定网格元素行的结束位置
            网格线顺序按内容书写方向数
        grid-template-area: 指定如何显示行和列，使用命名的网格元素  eg:grid-template-areas:'hea hea heb heb' 'hea hea hec hed' 'hee hef hef heg' 'hee heh heh hei';    
            你需要填满网格的每个格子，对于某个横跨多个格子的元素，重复写上那个元素grid-area属性定义的区域名字，所有名字只能出现在一个连续的区域，
            不能在不同的位置出现一个连续的区域必须是一个矩形，使用.符号，让一个格子留空
            grid-area:        给单元各命名                        eg:.css12 .he1 {grid-area: hea;}
        justify-content,与align-content属性的应用可借鉴弹性盒子章节
            当子元素宽为固定值时可用justify-content属性调整
            当父级元素高度固定时可用align-content属性调整
3.<cursor>:          显示光标移动到指定的类型
    url：      需使用的自定义光标的 URL。注释：请在此列表的末端始终定义一种普通的光标，以防没有由 URL 定义的可用光标。
    default:   默认光标（通常是一个箭头）
    auto:      默认。浏览器设置的光标。
    crosshair: 光标呈现为十字线。
    pointer:    光标呈现为指示链接的指针（一只手）
    move:      光标为某对象可被移动。
    e-resize:  光标为矩形框的边缘可被向右（东）移动。
    ne-resize：光标为矩形框的边缘可被向上及向右移动（北/东）。
    nw-resize：光标为矩形框的边缘可被向上及向左移动（北/西）。
    n-resize： 光标为矩形框的边缘可被向上（北）移动。
    se-resize：光标为矩形框的边缘可被向下及向右移动（南/东）。
    sw-resize：光标为矩形框的边缘可被向下及向左移动（南/西）。    
    s-resize： 光标为矩形框的边缘可被向下移动（南）。
    w-resize： 光标为矩形框的边缘可被向左移动（西）。
    text：     光标为文本。
    wait：     光标为程序正忙（通常是一只表或沙漏）。
    help：     光标为可用的帮助（通常是一个问号或一个气球）。
4.选择器:             优先级由大到小向下排列
    ID选择器：        #my-id 
    伪类选择器:       a:link:未访问     a:visited:访问后    a:hover:悬停    a:ctive:点击
        :last-child	p:last-child	选择所有p元素的最后一个子元素
        :not(selector)	:not(p)	选择所有p以外的元素
        :first-child	p:first-child	选择器匹配属于任意元素的第一个子元素的 <p> 元素
        :before	p:before	在每个<p>元素之前插入内容
        :after	p:after	在每个<p>元素之后插入内容
            content:   用来表达插入的内容
                attr():()n内接属性，输出属性值    
    属性选择器:       img[src]    选择的是img元素内src属性
        [title]:           选取所有包含title属性的元素
        [title="height"]:  选取所有包含title属性值为height的元素
        [title~="height"]: 选取所有包含title属性值含有单词height的元素
        [title|="height"]: 选取所有包含title属性值含有单词height-的元素
        [title*="height"]: 选取所有包含title属性值可以按顺序拆出height的元素
        [title^="height"]: 选取所有包含title属性值前含有单词height的元素
        [title$="height"]: 选取所有包含title属性值后含有单词height的元素
    类选择器:         .class
    元素选择器:       p{},h1{},table{}等
    通用选择器：      *{}         *{}相当于body{}, p*{}相当于P{}
    自定义属性：      $          eg:  $base-color: #c6538c;      .alert {border: 1px solid $base-color;}                                    
        选择器组合符号：
            空格：后代选择器，div p选取div父级内所有子元素p
            >:   子元素选择器，div>p选取div父级内所有一级子元素p
            +：  相邻兄弟选择器，div+p选取同一父级内div元素后的第一个元素p
            ~:   后续兄弟选择器, div~p选取同一父级内div元素后的所有一级元素p
            i：  大小写敏感标记  eg: li[class^="a" i]
5.计数器：            使用计数器自动编号
    counter-reset：   创建一个或多个计数器                  eg: counter-reset:section;
        section:  subsection:
    counter-increment:递增变量                             eg: counter-increment: subsection;
    content:         使用 ::before 和 ::after 伪元素来插入自动生成的内容
        counter:     eg: content: counter(section) "." counter(subsection) " ";
        counters:    eg: content: counters(section,".") " ";
            counter(section),counter(subsection)表示递增标量值
            "."表示插入字符串
            counters(section,".")表示简写
6.响应式设计：
    viewport:    是指用户网页的可视区域。                       eg:<meta name="viewport" content="width=device-width, initial-scale=1.0">
        width： 控制 viewport 的大小，可以指定的一个值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。
        height：和 width 相对应，指定高度。
        initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。
        maximum-scale：允许用户缩放到的最大比例。
        minimum-scale：允许用户缩放到的最小比例。
        user-scalable：用户是否可以手动缩放。
    orientation：屏幕的方向
        portrait：指定输出设备中的页面可见区域高度大于或等于宽度,竖放
        landscape： 除portrait值情况外，都是landscape ，横放
    hover:       悬浮媒体      仅在指点设备上显示（如鼠标），键盘和触屏无法悬浮，
    and:         且                                           eg:@media screen and (min-width: 400px) and (orientation: landscape)
    not:         非                                           eg:@media not all and (orientation: landscape) 
7.html文件转化成一个DOM（Document Object Model），DOM是文件在计算机内存中的表现形式。可以看成一棵树，分布着无数节点，每一个节点浏览器获取CSS之后会进行解析，
    根据选择器的不同类型（比如element、class、id等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id选择器等）
    应用在对应的的节点中，并添加节点的样式。而已、可以理解为渲染一棵树。

8.当浏览器无法解析css和选择器时，它会忽略该个元素继续下面的解析

9.一条css的规则就是由一个选择器和一个或多个声明组成。

10.当想要寻找一个CSS特性的更多内容时，可以使用搜索引擎来搜索 "mdn css-feature-name" 。例如，搜索 "mdn color" 和 "mdn font-size"！

11.css的声明总以{}括起来，每条声明都已(;）结尾。每条声明里包含了属性和属性值。在每个声明里要用冒号（:）将属性与属性值分隔开。

12./*  css注释  */

13.在选择器中以#来定义id选择器，id和class命名不要以数字开头，因为 Mozilla/Firefox 浏览器中以数字开头的id没用。id选择器仅可以在一个元素中使用。
    在选择器中以.来定义class选择器，class选择器用来描述一组元素的样式，class选择器区别id选择器可以多个元素使用。
    
14.在html上镶嵌样式表有三种方式： 1.外联样式表（extermal style sheet)   eg:<link rel="stylesheet" type="text/css" href="mystyle.css">
                               2.内联样式表（intermal style sheet)   eg:<head><style>p {margin-left:20px;}</style></head>
                               3.内联样式   （inline style)          eg:<p style="color:sienna;margin-left:20px">这是一个段落。</p>
	优先级：内联样式   （inline style)  > 内联样式表（intermal style sheet)  >  外联样式表（extermal style sheet) 
15.选择器优先级：内联样式>ID选择器>伪类>属性选择器>类选择器>元素类型选择器>通用选择器
    通用选择器 (*)，组合符 (+, >, ~, ' ')，和否定伪类 (:not) 不会影响优先级。

16.p.class并不加权重，仅代表选中带类class的元素p，.class p加权重，表示选中类class下所以子集的所有元素p。

17.!important规则使用与优先级无关，使用!important的声明将覆盖其他声明。使用!important不是良好的习惯，不破坏原有样式表级联关系，造成bug.
	使用方法：1.一定要优先考虑使用样式规则的优先级来解决问题而不是 !important
                                 2.只有在需要覆盖全站或外部 CSS 的特定页面中使用 
                                 3.!important永远不要在你的插件中使用 !important
                                 4.永远不要在全站范围的 CSS 代码中使用 !important
	 覆盖 !important 唯一的办法就是另一个 !important 具有 相同优先级 而且顺序靠后，或者更高优先级。

18.gackground属性可以按顺序（不用全写）简写    
        background-color;
		background-image;
		background-repeat;
		background-attachment；
		background-position,

19.字体：1.Serif               Serif字体中字符在行的末端拥有额外的装饰
        2.Sans-serif       Sans指字符在行的末端没用额外的装饰
        3.Monospace    所有字符等宽

20.1em=16px。em的尺寸单位由W3C建议。1em和当前字体大小相等。在浏览器中默认的文字大小是16px.长度单位换算比：1in = 2.54cm = 25.4 mm = 72pt = 6pc = 96px

21.font 简写属性可以在一个声明中设置所有字体属性，按顺序设置:     font-style：               字体样式
           									font-variant:  	  字体显示文本
	 									font-weight：	  字体粗细
										font-size/line-height: 字体大小/行高
										font-family：             字体
	其中font-size和font-family是必须的，其他值缺少则插入默认值。

22.italic和oblique区别：italic是字体为斜体，而obligation是让文字倾斜，一些不常用的字体或许就不能是用斜体属性。只能用obligation将文字倾斜。

23.大部分简写属性一般对应关系：	四个值：上，右，下，左
		               		三个值：上，右左，下
		              		 二个值：上下，右左
		              		 一个值：上右下左

24.轮廓属性outline不占位置，既不会增加额外的width或者height（这样不会导致浏览器渲染时出现reflow或是repaint）

25.css中position属性有五种定位的值，分别是：  
            1.static：      默认值，不受top,right,bottom,left影响，遵循文档流规律。
            2.fixed：       元素位置相对浏览器窗口不变，页面滚动也不会随内容移动，像一些网站的广告。fixed定位不受文档流规律
            3.relative：    相对元素定位，相对自身原先的位置进行变化，且其移动后会重叠其他元素，自身原本所占空间不变。    
            4.absolute：    绝对定位，位置对于上一级拥有定位的祖辈级元素进行变化，且脱离文档流，不占空间，会重叠其他元素。
            5.sticky:       粘贴定位，基于用户滚动页面来选择定位，设定一个特定数值，既top,right,bottom,left：5px 相当于在浏览器窗口
                                画一条有方向的线（只生效前一个浏览器打开时则判定固定元素的位置是否过了这条线。过了则切换为fixed定位，
                                即固定在浏览器窗口划线的位置；没过则切换为相对定位relative在固定在页面上。用户滚动时也在进行判定。
                                当定位元素所在父级元素不在浏览器窗口显示时，相对定位relative生效。
	z-index：有定位的元素才能被指定元素的重叠顺序。当页面元素堆叠是，顺序是先来的在下面后来在后面。z-index属性的正负值表示向上向下西移动几个顺序。
	定位时未设置具体定位数值时，定位元素位置维持原来位置（可当只脱离文档流使用），当设置限定值同时指明left和right是，元素会通过拉伸去满足两者
	（或宽度为零{属性值以到父级元素外}），top和bottom同理。=当定位元素设定了width和height时（包括padding），则会忽略right和bottom。

26.元素的浮动（float)特点：  1.元素只会水平移动，不能上下移动。
                            2.元素移动后周围元素会重新排列。
                            3.元素浮动向左向右移动时，直到它的外边缘碰到另外的框或浮动框。
                            4.浮动元素之前的元素不受影响，浮动之后的元素将围绕它。
                            5.浮动往往用于图像，如果图像向右浮动，下面的文本将围绕在它左边。
                            6.几个浮动元素放在一起的话，有空间它们将彼此相邻。
                            
27.对齐方式：margin：auto：      水平对齐一个元素，元素通过指定宽度，将两边的空外距平均分配。
	 	    text-align：center：为了文本在元素内居中对齐。
            图像居中：               将其放入块元素中，并居中。     eg：img {display: block; margin: 0 auto;}
            position:absolute： 左右对齐，使用绝对定位对齐元素，当使用 position 来对齐元素时, 通常 <body> 元素会设置 margin 和 padding为0px 。 
                                    这样可以避免在不同的浏览器中出现可见的差异。
            float:                        浮动对齐，如果子元素的高度大于父元素，且子元素设置了浮动，那么子元素将溢出，这时候你可以使用 "clearfix(清除浮动)" 来解决该问题。
                                    eg:  .clearfix {overflow: auto;}    .img2 {float: right;}
            垂直居中对齐：       padding
                                line-height
                                transform

28.同一元素left和right样式一般只能使用一次，同时使用会出现兼容问题，当浏览器解释代码的时候发现left和right同时存在时，就会放弃解释right。放弃解释后优先级就排不上用场了。

29.下拉菜单是通过将隐藏的元素重新显现出来。.dropdown .button-form{display:block}

30.css3一些重要的模块，选择器，盒模型，背景和边框，文字特效，2D和3D转换，动画，多列布局，用户界面。

31.matrix（a,b,c,d,e,f)可以看成矩阵    a c e       ,
				                    [ b d f ]
                                      0 0 1

32.calc() 函数用于动态计算长度值。需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；任何长度值都可以使用calc()函数进行计算；
	calc()函数支持 "+", "-", "*", "/" 运算；calc()函数使用标准的数学运算优先级规则；

33.函数：rgba()：hsla(): 颜色函数   hsla(188, 97%, 28%, .3)与rgba(0,0,0,0.4)一样用来表示颜色，四个值分别表示颜色轮的角度，饱和度，亮度，透明度。
        url():                从文件中返回图像函数
        calc():	             长度计算函数											
        not():               排除函数
        repeat():            重复函数                eg:repeat(2, 2fr 1fr);     相当于2fr 1fr 2fr 1fr
        minmax():           取值范围函数             eg:minmax(100px, auto)

34.csss三个特殊通用属性值：inherit: 继承父级元素的属性值
                    initial：默认浏览器的属性值，如浏览器未设置则继承父级属性值
                    unset：重置属性值，为浏览器默认值，如可从父级自然继承的属性值则采用父级属性值
                    属性all 可应用以上三个属性值将元素所有样式设置。  eg: all: unset; 

35.如果一个盒子对外显示是内联inline状态，<a> 元素、 <span>、 <em> 以及 <strong> 都是默认处于 inline 状态的。它有如下行为：
			1.不会换行。
      		2.width和height属性将不起作用。
			3.垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开，内边距和边框会与段落中的其他单词重叠。
				重叠顺序按文档流由上往下覆盖，上面会被遮住，下面会叠在上面。
    		4.水平方向的内边距、外边距以及边框会被应用且会把其他处于 inline 状态的盒子推开。
		inline-block：
   			1.设置width 和height 属性会生效。
			2.padding, margin, 以及border 会推开其他元素。
			3.不会换行

36.html中页面宽度高度在未定义的情况下，宽度为固定的屏幕长度，高度为body中所有子集内容高度和。大部分百分比计算都是按整个页面算。
	在限定的最大宽度中，页面会自动换行（高度无限（未限定下）），而高度不存在换宽，文本过多会超过本元素盒子。
	在限定的最小宽度中，会判定自身宽度是否符合大于最小宽度，符合则按本身的宽度，反之则按最小的。高度亦如此。	

37.默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。内联元素的height width与内容一致。你无法设置内联元素的height width 
	--- 它们就那样置于块级元素的内容里。 如果你想控制内联元素的尺寸，你需要为元素设置display:
    
38.书写模式属性writing-mode：有三个值：
            1.horizontal-tb：块流向(可以看成段落书写方向)是由上往下的（tb）,对应文本是横向的（horizontal）
            2.vertical-rl         块流向(可以看成段落书写方向)是由右往左的（rl）,对应文本是纵向的（vertical）
            3.vertical-lr	       块流向(可以看成段落书写方向)是由右往左的（lr）,对应文本是纵向的（vertical）
        内联尺寸（inline-size）：一般指文本正视视角的宽
        块级尺寸（block-size）：一般指文本正视视角的高
            margin,border.padding三个属性的top,bottom对应块级维度，可写成：margin-block-start,padding-block-end
            margin,border.padding三个属性的left,right对应内联维度，可写成：margin-inline-start,padding-inline-end

39.object-fit属性指定元素的内容应该如何去适应指定容器的高度与宽度。
	1.fill		默认，不保证保持原有的比例，内容拉伸填充整个内容容器。
	2.contain	保持原有尺寸比例。内容被缩放。	
	3.cover	保持原有尺寸比例。但部分内容可能被剪切。	
	4.none	保留原有元素内容的长度和宽度，也就是说内容不会被重置。

40.在一些浏览器中，表单元素默认不会继承字体样式，因此如果你想要确保你的表单填入区域使用body中或者一个父元素中定义的字体.为了保证统一，
	可以将将所有元素的内外边距均设为0是个好主意，然后在单独进行样式化控制的时候将这些加回来。
	eg:button,input,select,textarea {font-family : inherit; font-size : 100%; box-sizing: border-box;padding: 0;margin: 0;} 

41.创建简化测试案例：
            1.创建该问题的静态版本，获取源代码.css,js等，运行后问题是否还在
            2.删除js看问题是否还在，在则回复js，不在则优化js
            3.精简HTML代码，将一些无关竟要的删除
            4.删除不影响运行的css代码








	



























































































